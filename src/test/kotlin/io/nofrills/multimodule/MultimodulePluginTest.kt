/*
 *    Copyright 2020 Mateusz Armatys
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.nofrills.multimodule

import org.gradle.testfixtures.ProjectBuilder
import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.assertNull

class MultimodulePluginTest {
    @Test
    fun `plugin registers extension`() {
        val rootProject = ProjectBuilder.builder().withName("root").build()
        rootProject.plugins.apply("io.nofrills.multimodule")
        assertNotNull(rootProject.extensions.findByName("multimodule"))
    }

    @Test
    fun `apply aar plugin`() {
        val rootProject = ProjectBuilder.builder().withName("root").build()
        val project = ProjectBuilder.builder().withName("sub-project").withParent(rootProject).build()
        rootProject.plugins.apply("io.nofrills.multimodule")
        project.plugins.apply("io.nofrills.multimodule.aar")

        assertNotNull(project.plugins.findPlugin("com.android.library"))
    }

    @Test
    fun `apply apk plugin`() {
        val rootProject = ProjectBuilder.builder().withName("root").build()
        val project = ProjectBuilder.builder().withName("sub-project").withParent(rootProject).build()
        rootProject.plugins.apply("io.nofrills.multimodule")
        project.plugins.apply("io.nofrills.multimodule.apk")

        assertNotNull(project.plugins.findPlugin("com.android.application"))
    }

    @Test
    fun `apply jar plugin`() {
        val rootProject = ProjectBuilder.builder().withName("root").build()
        val project = ProjectBuilder.builder().withName("sub-project").withParent(rootProject).build()
        rootProject.plugins.apply("io.nofrills.multimodule")
        project.plugins.apply("io.nofrills.multimodule.jar")

        assertNull(project.plugins.findPlugin("com.android.application"))
        assertNull(project.plugins.findPlugin("com.android.library"))
        assertNotNull(project.plugins.findPlugin("java-library"))
    }
}
