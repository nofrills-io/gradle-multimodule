/*
 *    Copyright 2020 Mateusz Armatys
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.nofrills.multimodule

import org.gradle.testkit.runner.BuildResult
import java.io.File
import org.gradle.testkit.runner.GradleRunner
import kotlin.test.Test
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class MultimodulePluginFunctionalTest {
    @Test
    fun `jar kotlin plugin`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                kotlin {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("compileKotlin"))
    }

    @Test
    fun `aar kotlin plugin`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                kotlin {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("compileDebugKotlin"))
        assertTrue(result.output.contains("compileReleaseKotlin"))
    }

    @Test
    fun `jar publishing`() {
        val result = testCase(
            """
            multimodule {
                publish {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publish"))
    }

    @Test
    fun `jar publishing with sources`() {
        val result = testCase(
            """
            multimodule {
                publish {
                    withSources = true
                }
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("sourcesJar"))
        assertTrue(result.output.contains("publish"))
    }

    @Test
    fun `aar publishing`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                    defaultPublishConfig("prodRelease")
                    flavorDimensions "api"
                    productFlavors {
                        staging {
                            dimension "api"
                        }
                        prod {
                            dimension "api"
                        }
                    }
                }
                publish {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publishProdReleaseAarPublicationToMavenLocal"))
    }

    @Test
    fun `aar publishing with sources`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                publish {
                    withSources = true
                }
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publishReleaseAarPublicationToMavenLocal"))
    }

    @Test
    fun `apk publishing`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                publish {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.apk\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publishReleaseApkPublicationToMavenLocal"))
    }

    @Test
    fun `jacoco jar`() {
        val result = testCase(
            """
            multimodule {
                jacoco {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("jacocoTestReport"))
    }

    @Test
    fun `jacoco aar`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                jacoco {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("jacocoDebugTestReport"))
        assertTrue(result.output.contains("jacocoReleaseTestReport"))
    }

    @Test
    fun `jacoco aar with flavors`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                    flavorDimensions "api"
                    productFlavors {
                        staging {
                            dimension "api"
                        }
                        prod {
                            dimension "api"
                        }
                    }
                }
                jacoco {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("jacocoStagingDebugTestReport"))
        assertTrue(result.output.contains("jacocoProdDebugTestReport"))
        assertTrue(result.output.contains("jacocoStagingReleaseTestReport"))
        assertTrue(result.output.contains("jacocoProdReleaseTestReport"))
    }

    @Test
    fun `coroutines jar`() {
        val result = testCase(
                """
            multimodule {
                kotlin {
                    coroutines = true
                    stdLib = true
                    reflect = true
                }
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:dependencies")
        )

        // Verify the result
        assertTrue(result.output.contains("org.jetbrains.kotlinx:kotlinx-coroutines-core"))
        assertTrue(result.output.contains("org.jetbrains.kotlin:kotlin-stdlib-jdk8"))
        assertTrue(result.output.contains("org.jetbrains.kotlin:kotlin-reflect"))
    }

    @Test
    fun `coroutines aar`() {
        val result = testCase(
                """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                kotlin {
                    androidExtensions = true
                    jvmTarget = 6
                    coroutines = true
                    stdLib = true
                    reflect = true
                }
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:dependencies")
        )

        // Verify the result
        assertTrue(result.output.contains("org.jetbrains.kotlinx:kotlinx-coroutines-core"))
        assertTrue(result.output.contains("org.jetbrains.kotlinx:kotlinx-coroutines-android"))
        assertTrue(result.output.contains("org.jetbrains.kotlin:kotlin-stdlib"))
        assertTrue(result.output.contains("org.jetbrains.kotlin:kotlin-reflect"))
        assertTrue(result.output.contains("org.jetbrains.kotlin:kotlin-android-extensions-runtime"))
    }

    private fun testCase(
        multimoduleConfig: String,
        submoduleBuildConfig: String,
        runnerArgs: List<String>
    ): BuildResult {
        // Setup the test build
        val projectDir = File("build/functionalTest")
        val libDir = File(projectDir, "lib")
        libDir.mkdirs()

        projectDir.resolve("settings.gradle").writeText(
            """
            include(":lib")
        """.trimIndent()
        )
        projectDir.resolve("build.gradle").writeText(
            """
            plugins {
                id("io.nofrills.multimodule")
            }
            $multimoduleConfig
        """.trimIndent()
        )
        libDir.resolve("build.gradle").writeText(submoduleBuildConfig)

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments(runnerArgs)
        runner.withProjectDir(projectDir)
        return runner.build()
    }
}
