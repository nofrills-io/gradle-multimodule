/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.nofrills.multimodule

import org.gradle.testkit.runner.BuildResult
import java.io.File
import org.gradle.testkit.runner.GradleRunner
import kotlin.test.Test
import kotlin.test.assertTrue

class MultimodulePluginFunctionalTest {
    @Test
    fun `additional build type`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                    buildTypes {
                        create("mock") {
                        }
                        getByName("release") {
                            minifyEnabled = false
                        }
                    }
                }
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("compileDebugJava"))
        assertTrue(result.output.contains("compileMockJava"))
        assertTrue(result.output.contains("compileReleaseJava"))
    }

    @Test
    fun `kotlin plugin`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                kotlin {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("compileKotlin"))
    }

    @Test
    fun `jar publishing`() {
        val result = testCase(
            """
            multimodule {
                publish {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publish"))
    }

    @Test
    fun `jar publishing with sources`() {
        val result = testCase(
            """
            multimodule {
                publish {
                    withSources = true
                }
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.jar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("sourcesJar"))
        assertTrue(result.output.contains("publish"))
    }

    @Test
    fun `aar publishing`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                    defaultPublishConfig("prodRelease")
                    flavorDimensions "api"
                    productFlavors {
                        staging {
                            dimension "api"
                        }
                        prod {
                            dimension "api"
                        }
                    }
                }
                publish {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publishProdReleaseAarPublicationToMavenLocal"))
    }

    @Test
    fun `aar publishing with sources`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                publish {
                    withSources = true
                }
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.aar\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publishReleaseAarPublicationToMavenLocal"))
    }

    @Test
    fun `apk publishing`() {
        val result = testCase(
            """
            multimodule {
                android {
                    compileSdkVersion(28)
                }
                publish {}
            }
        """.trimIndent(), "plugins { id(\"io.nofrills.multimodule.apk\") }", listOf(":lib:tasks", "--all")
        )

        // Verify the result
        assertTrue(result.output.contains("publishReleaseApkPublicationToMavenLocal"))
    }

    private fun testCase(
        multimoduleConfig: String,
        submoduleBuildConfig: String,
        runnerArgs: List<String>
    ): BuildResult {
        // Setup the test build
        val projectDir = File("build/functionalTest")
        val libDir = File(projectDir, "lib")
        libDir.mkdirs()

        projectDir.resolve("settings.gradle").writeText(
            """
            include(":lib")
        """.trimIndent()
        )
        projectDir.resolve("build.gradle").writeText(
            """
            plugins {
                id("io.nofrills.multimodule")
            }
            $multimoduleConfig
        """.trimIndent()
        )
        libDir.resolve("build.gradle").writeText(submoduleBuildConfig)

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments(runnerArgs)
        runner.withProjectDir(projectDir)
        return runner.build()
    }
}
